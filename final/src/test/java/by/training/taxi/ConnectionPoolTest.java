package by.training.taxi;

import by.training.taxi.dao.*;
import by.training.taxi.user.UserAccountEntity;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import javax.sql.DataSource;
import java.sql.*;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;


@RunWith(JUnit4.class)
public class ConnectionPoolTest {

    private ConnectionPoolImpl connectionPool;

    @Before
    public void init () throws ConnectionPoolException {
        connectionPool = ConnectionPoolImpl.getInstance();
    }

    @Test
    public void shouldGetConnection()  throws ConnectionPoolException {
        Connection connection = connectionPool.getConnection();
        Assert.assertNotNull(connection);
    }

    @Test
    public void shouldTestReleasingWrongConnection() throws SQLException, ClassNotFoundException {
        Class.forName ("org.h2.Driver");
        Connection connection = DriverManager.getConnection("jdbc:h2:mem:");
        assertThrows(RuntimeException.class, () -> connectionPool.releaseConnection(connection));
    }

    @Test
    public void shoulDoSmth(){
        UserAccountEntity user = new UserAccountEntity();
        user.getId();
    }

    @After
    public void destroy(){
        connectionPool.close();
    }
/*
    @Test
    public void shouldGetTestConnection() throws SQLException, ConnectionPoolException {
        DataSource dataSource = new DataSourceImpl(connectionPool);
        Connection connection = dataSource.getConnection();
        Assert.assertNotNull(connection);

        String userName = "Jermaine";
        String userEmail = "jdonnellan0@un.org";
        connection.setAutoCommit(false);
        try {
            PreparedStatement createTableStatement = connection.prepareStatement("CREATE TABLE users (\n" +
                    "  id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100, INCREMENT BY 1) PRIMARY KEY,\n" +
                    "  name VARCHAR(30),\n" +
                    "  email  VARCHAR(50)\n" +
                    ")");
            createTableStatement.executeUpdate();
            createTableStatement.close();


            String insertSql = "INSERT INTO users (name, email) VALUES ('" + userName + "', '" + userEmail + "')";
            PreparedStatement insertStatement = connection.prepareStatement(insertSql);
            int inserted = insertStatement.executeUpdate();
            insertStatement.close();
            assertEquals(1, inserted);

            connection.commit();
        } catch (SQLException e) {
            connection.rollback();
        } finally {
            connection.close();
        }

        connection = dataSource.getConnection();
        String selectSql = "SELECT * FROM users WHERE name = 'alex'";
        PreparedStatement selectStatement = connection.prepareStatement(selectSql);
        ResultSet resultSet = selectStatement.executeQuery();
        while (resultSet.next()) {
            int id = resultSet.getInt("id");
            System.out.println("id = " + id);
            String name = resultSet.getString("name");
            assertEquals(userName, name);
            String email = resultSet.getString("email");
            assertEquals(userEmail, email);
        }

        resultSet.close();
        selectStatement.close();
        connection.close();

    }

*/
}
